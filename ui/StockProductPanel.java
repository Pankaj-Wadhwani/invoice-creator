package ui;

import constants.DatabaseColumnNameConstants;
import constants.DatabaseTableNameConstants;
import constants.MyColorConstants;
import database.DatabaseManagement;
import database.CategoryTable;
import database.ProductTable;
import java.awt.Font;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.Icon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import jiconfont.icons.FontAwesome;
import jiconfont.swing.IconFontSwing;
import net.proteanit.sql.DbUtils;
import org.netbeans.lib.awtextra.AbsoluteConstraints;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author jains
 */
public class StockProductPanel extends javax.swing.JPanel {

    /**
     * Creates new form MainProductPanel
     */

    /**
     *
     */
    public StockProductPanel() {
        initComponents();
        jtbData.setFillsViewportHeight(true);
        jcbCategoryName.setSelectedIndex(-1);
        initMessage();
        clearFields();
        updateTableData();
        initIcons();
        btnAdd.setEnabled(false);
        btnDelete.setEnabled(false);
        btnUpdate.setEnabled(false);
    }
    private void initIcons(){
        Icon icon;
        icon = IconFontSwing.buildIcon(FontAwesome.PLUS_CIRCLE, 30, MyColorConstants.MYWHITE);
        btnAdd.setIcon(icon);
        icon = IconFontSwing.buildIcon(FontAwesome.MINUS_CIRCLE, 30, MyColorConstants.MYWHITE);
        btnDelete.setIcon(icon);
        icon = IconFontSwing.buildIcon(FontAwesome.EXCLAMATION_CIRCLE, 30, MyColorConstants.MYWHITE);
        btnUpdate.setIcon(icon);
        icon = IconFontSwing.buildIcon(FontAwesome.ERASER, 30, MyColorConstants.MYWHITE);
        btnClear.setIcon(icon);
        btnNew.setIcon(IconFontSwing.buildIcon(FontAwesome.REFRESH, 30, MyColorConstants.MYWHITE));
    }
    private void initMessage(){
        message = new JLabel();
        message.setFont(new Font("Copse", Font.BOLD, 30));
        message.setForeground(MyColorConstants.MYWHITE);
        message.setText("Please select a category to see the available products!");
//        message.setLocation(400,200);
        backPanel.add(message,new AbsoluteConstraints(420,550),0);
    }
//    private void initJComboBox(JComboBox jcb, Object[] ele){
//        for(int i = 0; i<ele.length; i++){
//            jcb.addItem(ele[i]);
//        }
//    }
//    private void JComboBoxToJComboText(JComboBox jcb){
//        
//    }

    public void addItemToJCB(String i) {
            flag = false;
            jcbCategoryName.addItem(i);
            jcbCategoryName.setSelectedIndex(-1);
            flag = true;
    }

//    public boolean itemNotPresentInJcb(JComboBox jcb, String item) {
//        for (int i = 0; i < jcb.getItemCount(); i++) {
//            if (jcb.getItemAt(i).equals(item)) {
//                return false;
//            }
//        }
//        return true;
//    }




    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backPanel = new javax.swing.JPanel();
        topFrontPanel = new javax.swing.JPanel();
        lblCategoryName = new javax.swing.JLabel();
        lblBrandName = new javax.swing.JLabel();
        lblProductModel = new javax.swing.JLabel();
        lblPrice = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        jcbCategoryName = new javax.swing.JComboBox<>();
        txtBrandName = new javax.swing.JTextField();
        txtProductModel = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jtbData = new javax.swing.JTable(){
            @Override
            public boolean isCellEditable(int r,int c){
                return false;
            }
        };
        operationPanel = new javax.swing.JPanel();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        btnNew = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 250, 255));
        setForeground(new java.awt.Color(255, 250, 255));

        backPanel.setBackground(new java.awt.Color(255, 250, 255));
        backPanel.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        topFrontPanel.setBackground(new java.awt.Color(255, 250, 255));

        lblCategoryName.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        lblCategoryName.setText("Category Name :  ");

        lblBrandName.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        lblBrandName.setText("Brand Name :");

        lblProductModel.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        lblProductModel.setText("Product Model : ");

        lblPrice.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        lblPrice.setText("Price : ");

        txtPrice.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        txtPrice.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(15, 163, 177), 2));
        txtPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPriceActionPerformed(evt);
            }
        });

        lblQuantity.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        lblQuantity.setText("Quantity : ");

        txtQuantity.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        txtQuantity.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(15, 163, 177), 2));

        jcbCategoryName.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        jcbCategoryName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(15, 163, 177), 2));
        jcbCategoryName.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbCategoryNameItemStateChanged(evt);
            }
        });

        txtBrandName.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        txtBrandName.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(15, 163, 177), 2));

        txtProductModel.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        txtProductModel.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(15, 163, 177), 2));

        javax.swing.GroupLayout topFrontPanelLayout = new javax.swing.GroupLayout(topFrontPanel);
        topFrontPanel.setLayout(topFrontPanelLayout);
        topFrontPanelLayout.setHorizontalGroup(
            topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topFrontPanelLayout.createSequentialGroup()
                .addGap(100, 100, 100)
                .addGroup(topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblProductModel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblBrandName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblCategoryName))
                .addGap(80, 80, 80)
                .addGroup(topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(txtPrice)
                    .addComponent(jcbCategoryName, javax.swing.GroupLayout.Alignment.LEADING, 0, 250, Short.MAX_VALUE)
                    .addComponent(txtQuantity)
                    .addComponent(txtBrandName)
                    .addComponent(txtProductModel))
                .addContainerGap(100, Short.MAX_VALUE))
        );
        topFrontPanelLayout.setVerticalGroup(
            topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(topFrontPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addGroup(topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jcbCategoryName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblBrandName, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtBrandName))
                .addGap(30, 30, 30)
                .addGroup(topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblProductModel, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtProductModel))
                .addGap(30, 30, 30)
                .addGroup(topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addGroup(topFrontPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        backPanel.add(topFrontPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 20, -1, -1));

        jScrollPane1.setBackground(new java.awt.Color(255, 250, 255));
        jScrollPane1.setBorder(null);

        jtbData.setBackground(new java.awt.Color(2, 47, 64));
        jtbData.setFont(new java.awt.Font("Copse", 1, 18)); // NOI18N
        jtbData.setForeground(new java.awt.Color(255, 250, 255));
        jtbData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jtbData.setGridColor(new java.awt.Color(15, 163, 177));
        jtbData.setRowHeight(40);
        jtbData.setSelectionBackground(new java.awt.Color(62, 146, 204));
        jtbData.setSelectionForeground(new java.awt.Color(255, 250, 255));
        jtbData.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jtbData.getTableHeader().setResizingAllowed(false);
        jtbData.getTableHeader().setReorderingAllowed(false);
        jtbData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jtbDataMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jtbData);

        backPanel.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 430, 998, -1));

        operationPanel.setBackground(new java.awt.Color(255, 250, 255));

        btnAdd.setBackground(new java.awt.Color(30, 27, 24));
        btnAdd.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        btnAdd.setForeground(new java.awt.Color(15, 163, 177));
        btnAdd.setText("Add");
        btnAdd.setContentAreaFilled(false);
        btnAdd.setOpaque(true);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setBackground(new java.awt.Color(30, 27, 24));
        btnUpdate.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        btnUpdate.setForeground(new java.awt.Color(15, 163, 177));
        btnUpdate.setText("Update");
        btnUpdate.setContentAreaFilled(false);
        btnUpdate.setOpaque(true);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setBackground(new java.awt.Color(30, 27, 24));
        btnDelete.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        btnDelete.setForeground(new java.awt.Color(15, 163, 177));
        btnDelete.setText("Delete");
        btnDelete.setContentAreaFilled(false);
        btnDelete.setOpaque(true);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnClear.setBackground(new java.awt.Color(30, 27, 24));
        btnClear.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        btnClear.setForeground(new java.awt.Color(15, 163, 177));
        btnClear.setText("Clear");
        btnClear.setContentAreaFilled(false);
        btnClear.setOpaque(true);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        btnNew.setBackground(new java.awt.Color(30, 27, 24));
        btnNew.setFont(new java.awt.Font("Copse", 1, 24)); // NOI18N
        btnNew.setForeground(new java.awt.Color(15, 163, 177));
        btnNew.setText("New");
        btnNew.setContentAreaFilled(false);
        btnNew.setOpaque(true);
        btnNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNewActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout operationPanelLayout = new javax.swing.GroupLayout(operationPanel);
        operationPanel.setLayout(operationPanelLayout);
        operationPanelLayout.setHorizontalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(operationPanelLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
        );
        operationPanelLayout.setVerticalGroup(
            operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, operationPanelLayout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(operationPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNew, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30))
        );

        backPanel.add(operationPanel, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 860, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(backPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1718, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(backPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    private void updateTableData() {
        ResultSet rs = null;
        try {
            rs = DatabaseManagement.select(DatabaseTableNameConstants.PRODUCTTABLE,"WHERE categoryid = " + CategoryTable.getCategoryId(DatabaseColumnNameConstants.CATEGORYNAME, (String)jcbCategoryName.getSelectedItem()),columns);
            jtbData.setModel(DbUtils.resultSetToTableModel(rs));
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Issue :  " + e);
        } finally {
            try {
                rs.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Problem in closing rs or preparedStatement :  " + e);
            }
        }
        
        if(jcbCategoryName.getSelectedIndex() == -1)
            message.setVisible(true);
        else
            message.setVisible(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }
        
        
    public void updateChanges() {
        jcbCategoryName.removeAllItems();
        ResultSet rs = DatabaseManagement.select(DatabaseTableNameConstants.CATEGORYTABLE,null, null);
        Object[] ele = new Object[DatabaseManagement.getNumRows(rs)];
        int i = 0;
        try {
            while (rs.next()) {
                addItemToJCB(rs.getString(DatabaseColumnNameConstants.CATEGORYNAME));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error initJCB : " + e);
        }
        clearFields();
    }
    
    
    private void clearFields() {
        jcbCategoryName.setSelectedIndex(-1);
        txtBrandName.setText("");
        txtProductModel.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
        updateTableData();
    }

    public void reset(){
        jcbCategoryName.setSelectedIndex(-1);
        txtBrandName.setText("");
        txtPrice.setText("");
        txtProductModel.setText("");
        txtQuantity.setText("");
    }
    private boolean isSpaceInBetween(){
        return (txtBrandName.getText().contains(" ") || txtProductModel.getText().contains(" "));
    }
    private void addInDatabase() {
        if (!isAnyFieldEmpty() && !isSpaceInBetween()) {
            try {
                double price = Double.parseDouble(txtPrice.getText());
                int quantity = Integer.parseInt(txtQuantity.getText());
                if(price > 0 && quantity > 0){
                    boolean inserted = ProductTable.insert(cId, txtProductModel.getText(), txtBrandName.getText(), price, quantity);
                    CategoryTable.changeCategoryQuantity(cId);
                    CategoryTable.changeCategoryPrice(cId);
                    if(inserted)
                        JOptionPane.showMessageDialog(null, "Record Saved Successfully."); 
                    else
                        JOptionPane.showMessageDialog(null, "Record already exists, Please update the following.");
                    clearFields();
                    updateTableData();
                }else{
                    JOptionPane.showMessageDialog(null, "Qauntity or Price should be greater than 0");
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter data correctly");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Field(s) cannot be Empty or have spaces, Please Recheck");
        }
    }

    
    private void deleteFromDatabase() {
        productId = getProductId();
        categoryIdOfProduct = getCategoryId();
        double price = ProductTable.getPrice("productid", productId + "");
        int quantity = ProductTable.getQuantity("productid", productId + "");
        double existingPrice = CategoryTable.getTotalValueOfProducts(categoryIdOfProduct);
        int existingQuantity = CategoryTable.getTotalProducts(categoryIdOfProduct);
        System.out.println(existingPrice + " existing price");
        System.out.println(existingQuantity + " existing quantity");
        System.out.println(price + " price");
        System.out.println(quantity + " quantity");
        int ch = JOptionPane.showConfirmDialog(null, "Are you sure?\nProduct will be deleted!","Warning!!",JOptionPane.YES_NO_OPTION);
        if(ch == JOptionPane.YES_OPTION){
            ProductTable.delete("productid", productId);
            if(price>0 && quantity>0){
                CategoryTable.changeCategoryQuantity(cId);
                CategoryTable.changeCategoryPrice(cId);
            }
            JOptionPane.showMessageDialog(null, "Product deletd successfully!");
            clearFields();
        }
    }
    
    
    private void updateInDatabase(){
        jcbCategoryName.setEnabled(false);
        btnAdd.setEnabled(false);
        if(!isAnyFieldEmpty()){
            int quantity = Integer.parseInt(txtQuantity.getText());
            double price = Double.parseDouble(txtPrice.getText());
            ProductTable.update(getProductId(),txtBrandName.getText(), txtProductModel.getText(), price, quantity);
            CategoryTable.changeCategoryQuantity(cId);
            CategoryTable.changeCategoryPrice(cId);
            updateTableData();
            clearFieldsPart2();
        }
        jcbCategoryName.setEnabled(true);
        btnAdd.setEnabled(true);
    }
    
    
    public void clearFieldsPart2(){
        txtBrandName.setText("");
        txtProductModel.setText("");
        txtPrice.setText("");
        txtQuantity.setText("");
    }
    
    
    public int getProductId(){
        int selectedRow = jtbData.getSelectedRow();
        if(selectedRow != -1){
    //        System.out.println(selectedRow);
            String brandName = jtbData.getValueAt(selectedRow, 0).toString();
    //        System.out.println(brandName);
            String productModel = jtbData.getValueAt(selectedRow, 1).toString();
    //        System.out.println(productModel);
            int id = ProductTable.getProductId(brandName, productModel);
    //        System.out.println(id);
            return id;
        }
        return -1;
    }
    
    
    public int getCategoryId(){
        if(productId!=-1){
            return ProductTable.getCategoryId(productId);
        }
        return -1;
    }
    

    private boolean isAnyFieldEmpty() {
        return !(jcbCategoryName.getSelectedIndex()!=-1
                && !txtBrandName.getText().equals("")
                && !txtProductModel.getText().equals("")
                && !txtPrice.getText().equals("")
                && !txtQuantity.getText().equals(""));
    }
    
    
    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if(!isAnyFieldEmpty() && !isSpaceInBetween()){
            btnUpdate.setEnabled(false);
            btnDelete.setEnabled(false);
            btnAdd.setEnabled(false);
            
            updateInDatabase();
        }
        else{
            JOptionPane.showMessageDialog(null, "Field(s) cannot be Empty or have spaces, Please Recheck");
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        addInDatabase();
        btnAdd.setEnabled(false);
        btnUpdate.setEnabled(false);
        btnDelete.setEnabled(false);
    }//GEN-LAST:event_btnAddActionPerformed

    private void jtbDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jtbDataMouseClicked
        int selectedRow = jtbData.getSelectedRow();
        if(selectedRow!=-1){
            btnAdd.setEnabled(false);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            productId = getProductId();
            ResultSet rs = DatabaseManagement.select(DatabaseTableNameConstants.PRODUCTTABLE,"WHERE productid = " + productId,columns);
            try {
                if(rs.next()){
                    jcbCategoryName.setSelectedItem(jcbCategoryName.getSelectedItem());
                    txtBrandName.setText(rs.getString(DatabaseColumnNameConstants.BRANDNAME));
                    txtProductModel.setText(rs.getString(DatabaseColumnNameConstants.PRODUCTMODEL));
                    txtQuantity.setText(rs.getInt(DatabaseColumnNameConstants.QUANTITY) + "");
                    txtPrice.setText(rs.getDouble(DatabaseColumnNameConstants.PRICE) + "");
                }
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(null, "Error in jtbDataTable : " + e);
            }
        }
    }//GEN-LAST:event_jtbDataMouseClicked

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        deleteFromDatabase();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        clearFields();
        btnAdd.setEnabled(false);
    }//GEN-LAST:event_btnClearActionPerformed

    private void jcbCategoryNameItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbCategoryNameItemStateChanged
        if(flag){
            cId = CategoryTable.getCategoryId(DatabaseColumnNameConstants.CATEGORYNAME, (String)jcbCategoryName.getSelectedItem());
            updateTableData();
        }        
    }//GEN-LAST:event_jcbCategoryNameItemStateChanged

    private void btnNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNewActionPerformed
        clearFields();
        btnAdd.setEnabled(true);
    }//GEN-LAST:event_btnNewActionPerformed

    private void txtPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPriceActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel backPanel;
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnNew;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JComboBox<String> jcbCategoryName;
    private javax.swing.JTable jtbData;
    private javax.swing.JLabel lblBrandName;
    private javax.swing.JLabel lblCategoryName;
    private javax.swing.JLabel lblPrice;
    private javax.swing.JLabel lblProductModel;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JPanel operationPanel;
    private javax.swing.JPanel topFrontPanel;
    private javax.swing.JTextField txtBrandName;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtProductModel;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables
    private static final String SQL = "SELECT brandname,productmodel,price,quantity FROM product";
    private static final String[] columns = {"brandname","productmodel","price","quantity"};
    private int cId = 0;
    private boolean flag = false;
    private int productId = -1;
    private int categoryIdOfProduct = -1;
    private JLabel message;
}
